// Mocks generated by Mockito 5.4.3 from annotations
// in weather_jojo/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i13;
import 'dart:typed_data' as _i14;

import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:shared_preferences/shared_preferences.dart' as _i15;
import 'package:weather_jojo/core/error/failure.dart' as _i7;
import 'package:weather_jojo/data/data_sources/local_data_sources/weather_local_data_source.dart'
    as _i10;
import 'package:weather_jojo/data/data_sources/remote_data_sources/weather_remote_data_source.dart'
    as _i9;
import 'package:weather_jojo/data/models/forecast_model.dart' as _i3;
import 'package:weather_jojo/domain/entities/forecast_entity.dart' as _i8;
import 'package:weather_jojo/domain/repositories/weather_repository.dart'
    as _i5;
import 'package:weather_jojo/domain/usecases/weather_usecase.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeForecastModel_1 extends _i1.SmartFake implements _i3.ForecastModel {
  _FakeForecastModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_2 extends _i1.SmartFake implements _i4.Response {
  _FakeResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_3 extends _i1.SmartFake
    implements _i4.StreamedResponse {
  _FakeStreamedResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i5.WeatherRepository {
  MockWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.ForecastEntity>> getForecastByPosition(
    double? lat,
    double? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecastByPosition,
          [
            lat,
            lon,
          ],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, _i8.ForecastEntity>>.value(
                _FakeEither_0<_i7.Failure, _i8.ForecastEntity>(
          this,
          Invocation.method(
            #getForecastByPosition,
            [
              lat,
              lon,
            ],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.ForecastEntity>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.ForecastEntity>> getForecastByName(
          String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecastByName,
          [name],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, _i8.ForecastEntity>>.value(
                _FakeEither_0<_i7.Failure, _i8.ForecastEntity>(
          this,
          Invocation.method(
            #getForecastByName,
            [name],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.ForecastEntity>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, void>> cacheRecentLocations(
    String? key,
    List<String>? locations,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheRecentLocations,
          [
            key,
            locations,
          ],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, void>>.value(
            _FakeEither_0<_i7.Failure, void>(
          this,
          Invocation.method(
            #cacheRecentLocations,
            [
              key,
              locations,
            ],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, void>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<String>>> getRecentLocations(
          String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentLocations,
          [key],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, List<String>>>.value(
            _FakeEither_0<_i7.Failure, List<String>>(
          this,
          Invocation.method(
            #getRecentLocations,
            [key],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<String>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, void>> cacheForecastData(
    String? key,
    List<_i8.ForecastWeatherEntity>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheForecastData,
          [
            key,
            data,
          ],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, void>>.value(
            _FakeEither_0<_i7.Failure, void>(
          this,
          Invocation.method(
            #cacheForecastData,
            [
              key,
              data,
            ],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, void>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.ForecastWeatherEntity>>>
      getCacheForecastData(String? key) => (super.noSuchMethod(
            Invocation.method(
              #getCacheForecastData,
              [key],
            ),
            returnValue: _i6.Future<
                    _i2.Either<_i7.Failure,
                        List<_i8.ForecastWeatherEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.ForecastWeatherEntity>>(
              this,
              Invocation.method(
                #getCacheForecastData,
                [key],
              ),
            )),
          ) as _i6.Future<
              _i2.Either<_i7.Failure, List<_i8.ForecastWeatherEntity>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, String>> getCacheCityName() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheCityName,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, String>>.value(
            _FakeEither_0<_i7.Failure, String>(
          this,
          Invocation.method(
            #getCacheCityName,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, String>>);
}

/// A class which mocks [WeatherRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteDataSource extends _i1.Mock
    implements _i9.WeatherRemoteDataSource {
  MockWeatherRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.ForecastModel> getForecastByPosition(
    double? lat,
    double? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecastByPosition,
          [
            lat,
            lon,
          ],
        ),
        returnValue: _i6.Future<_i3.ForecastModel>.value(_FakeForecastModel_1(
          this,
          Invocation.method(
            #getForecastByPosition,
            [
              lat,
              lon,
            ],
          ),
        )),
      ) as _i6.Future<_i3.ForecastModel>);

  @override
  _i6.Future<_i3.ForecastModel> getForecastByName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecastByName,
          [name],
        ),
        returnValue: _i6.Future<_i3.ForecastModel>.value(_FakeForecastModel_1(
          this,
          Invocation.method(
            #getForecastByName,
            [name],
          ),
        )),
      ) as _i6.Future<_i3.ForecastModel>);
}

/// A class which mocks [WeatherLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherLocalDataSource extends _i1.Mock
    implements _i10.WeatherLocalDataSource {
  MockWeatherLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> cacheRecentLocations(
    String? key,
    List<String>? locations,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheRecentLocations,
          [
            key,
            locations,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<String>> getRecentLocations(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentLocations,
          [key],
        ),
        returnValue: _i6.Future<List<String>>.value(<String>[]),
      ) as _i6.Future<List<String>>);

  @override
  _i6.Future<void> cacheForecastData(
    String? key,
    List<_i3.ForecastWeatherModel>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheForecastData,
          [
            key,
            data,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<_i3.ForecastWeatherModel>> getCacheForecastData(
          String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheForecastData,
          [key],
        ),
        returnValue: _i6.Future<List<_i3.ForecastWeatherModel>>.value(
            <_i3.ForecastWeatherModel>[]),
      ) as _i6.Future<List<_i3.ForecastWeatherModel>>);

  @override
  _i6.Future<String> getCacheCityName() => (super.noSuchMethod(
        Invocation.method(
          #getCacheCityName,
          [],
        ),
        returnValue: _i6.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #getCacheCityName,
            [],
          ),
        )),
      ) as _i6.Future<String>);
}

/// A class which mocks [WeatherUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherUsecase extends _i1.Mock implements _i12.WeatherUsecase {
  MockWeatherUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.ForecastEntity>> getForecastByPosition(
    double? lat,
    double? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecastByPosition,
          [
            lat,
            lon,
          ],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, _i8.ForecastEntity>>.value(
                _FakeEither_0<_i7.Failure, _i8.ForecastEntity>(
          this,
          Invocation.method(
            #getForecastByPosition,
            [
              lat,
              lon,
            ],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.ForecastEntity>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.ForecastEntity>> getForecastByName(
          String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecastByName,
          [name],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, _i8.ForecastEntity>>.value(
                _FakeEither_0<_i7.Failure, _i8.ForecastEntity>(
          this,
          Invocation.method(
            #getForecastByName,
            [name],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.ForecastEntity>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, void>> cacheRecentLocations(
    String? key,
    List<String>? locations,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheRecentLocations,
          [
            key,
            locations,
          ],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, void>>.value(
            _FakeEither_0<_i7.Failure, void>(
          this,
          Invocation.method(
            #cacheRecentLocations,
            [
              key,
              locations,
            ],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, void>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<String>>> getRecentLocations(
          String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentLocations,
          [key],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, List<String>>>.value(
            _FakeEither_0<_i7.Failure, List<String>>(
          this,
          Invocation.method(
            #getRecentLocations,
            [key],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<String>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, void>> cacheForecastData(
    String? key,
    List<_i8.ForecastWeatherEntity>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheForecastData,
          [
            key,
            data,
          ],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, void>>.value(
            _FakeEither_0<_i7.Failure, void>(
          this,
          Invocation.method(
            #cacheForecastData,
            [
              key,
              data,
            ],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, void>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.ForecastWeatherEntity>>>
      getCacheForecastData(String? key) => (super.noSuchMethod(
            Invocation.method(
              #getCacheForecastData,
              [key],
            ),
            returnValue: _i6.Future<
                    _i2.Either<_i7.Failure,
                        List<_i8.ForecastWeatherEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.ForecastWeatherEntity>>(
              this,
              Invocation.method(
                #getCacheForecastData,
                [key],
              ),
            )),
          ) as _i6.Future<
              _i2.Either<_i7.Failure, List<_i8.ForecastWeatherEntity>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, String>> getCacheCityName() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheCityName,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, String>>.value(
            _FakeEither_0<_i7.Failure, String>(
          this,
          Invocation.method(
            #getCacheCityName,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, String>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i4.Client {
  @override
  _i6.Future<_i4.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<_i14.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i14.Uint8List>.value(_i14.Uint8List(0)),
        returnValueForMissingStub:
            _i6.Future<_i14.Uint8List>.value(_i14.Uint8List(0)),
      ) as _i6.Future<_i14.Uint8List>);

  @override
  _i6.Future<_i4.StreamedResponse> send(_i4.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i6.Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_3(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_3(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i6.Future<_i4.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i15.SharedPreferences {
  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
        returnValueForMissingStub: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getBool,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getInt,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getDouble,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getString,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getStringList,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as List<String>?);

  @override
  _i6.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
